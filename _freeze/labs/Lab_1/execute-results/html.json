{
  "hash": "3bf1f0cd33acf061d1d6c71dd51eb16e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ncategories: \"Lab\"\nexecute:\n  eval: true\nformat:\n  html:\n    code-link: true #Supposed to create a link to documentation but its not, for some reason.\n   # code-block-bg: true # \"lightblue\" Does not work well with dark mode.\n    code-block-border-left: \"#31BAE9\"\n    code-fold: show #also try true OR false and decide if you like it.\n    code-tools: false\n    code-copy: true\n---\n\n\n# Reproducuble Reports {.unnumbered}\n\n\n\n\n\n\n\n## Introduction\n\nIn today's lab, we introduce an interface known as quarto that is helpful in creating reproducible reports.\nOne of the most powerful features of quarto is the fact that you can write code (in code chunks) and plain text in the same document.\nYou can generate (render) your work into formats such as pdf, word, html, etc that can be shared easily.\nIf you are using the desktop version of quarto, you need to download quarto from <https://quarto.org/docs/get-started/> before you proceed.\n\n## Installing a new package\n\nWe are going to need a package called `palmerpenguins`. Install it before you proceed.\nTo install the package, run the following command <span style=\"color:red\">in the console</span>\n\n``` toml\ninstall.packages(\"palmerpenguins)\n```\nAn alternative way to install a package in RStudio is to use the `install` button in the packages tab.\n\n## Creating a quarto file\n\nTo create your First Quarto file, follow the following steps:\n\nGo to File\\>New File \\> Quarto document.\nSee below:\n\n![](images/a2.jpeg){width=\"90%\"}\n\nAfter clicking Quarto document,a pop up window will appear with fields for the title and author.\nEnter the title of the document as `Introducing Quarto and Tidyverse` because that is what we are doing today.\nWrite your name under author.\nThe output format can stay as HTML.\nYou can always change these options even after creating the document.\nThe popup window looks as follows:\n\n![](images/a3.jpeg){width=\"70%\"}\n\nClick create to create the document.\nNote that the document appears with the name Untitled.\nClick on `file` then navigate to `save` then change the name from untitled to `Lab_01`.\nRemember, we do not want to use a space for the document name.\nTo tell whether your document saved properly, you will see the document under files with a `.qmd` extension.\nWith this document saved here, you can always return to it any time and continue working.\n\nNow, click on `Render` to see the output of the document you just created.\nYou will note that the document has both plain text and code chunks.\nWe shall use the code chunks for writing code and plain text for interpreting our analyses and writing reports.\nTo add your own code chunk, just click on `code` the go to add new `chunk` or use the keyboard shortcut `cmd+opt+I` on a mac and `control+opt+I` on windows.\nWhen doing this, make sure your cursor is at the place where you want to create the new code chunk.\n\nBy default, the code chunk that comes is for R code.\nIf you want to write `python` code, just change the `r` to python.\n\nTo create a new code chunk, you can copy an already existing code chunk and paste it elsewhere on the document then edit it appropriately.\nYou may also create new code chunks by clicking on Code and navigating to Insert code chunk.\n\n## Using Code Chunks\n\nIn a code chunk, you write code that you want to reproduce in your report.\nThere are other operations such as installing packages that should be done only in the `console`.\nWhen you render a quarto document, quarto runs all code chunks sequentially from top to bottom in order to output your report (in pdf, html, or word).\nIf any code chunks has code for package installation, it means R will try to re-install the package every time you render the document (we said packages are installed one).\nOperations such as activating packages, i.e., `library(package name)`, should be included in the first code chunk.\n\nAs a start, let us load the `openintro`, `tidyverse`, and `palmerpenguins` packages.\nCopy and paste the following code in the **first** code chunk:\n\n``` toml\nlibrary(openintro)\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n```\n\nRun the code chunk with the packages to ensure that they are all working.\nIf any of them is missing, R will prompt you to install them.\n\n## Loading (and viewing) Data\n\nRemember that the openintro package contains the data that comes with the openintro text.\nTo view a complete list of the data frames, visit <https://www.openintro.org/data/>.\nToday, we will use a data frame called `penguins` contained in the `palmerpenguins` package.\nTo learn more about this data frame, run the following code in the ***console***:\n\n``` toml\n?penguins\n```\n\nTo load the data into your document, run the following command:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"penguins\")\n```\n:::\n\n\n\nWhen you run the above code, a new object should appear in the environment area.\nClick on `penguins` to view and study the data.\n\n## Some Analyses (with Tidyverse)\n\nNow that you have \"imported\" the data into R, we want to perform a few analyses.\nWe are going to use the tidyverse package to do this.\nThe tidyverse is `a collection of R packages` for data analysis that are developed with common ideas and norms.\nAccording to @Wickham2019,\n\n\"At a high level, the tidyverse is a language for solving data science challenges with R code. Its primary goal is to facilitate a conversation between a human and a computer about data. Less abstractly, the tidyverse is a collection of R packages that share a high-level design philosophy and low-level grammar and data structures, so that learning one package makes it easier to learn the next.\"\n\n### Tidyverse Workflow\n\nIn lab_00, we performed the analyses using base R code.\nWe saw that to compute the mean of a given variable in a data frame, you use `data_frame_name$variable_name`.\nThe tidyverse workflow is a bit different and is what we shall use for the most part.\n\nFor example, to compute the mean of `bill_length_mm` from the `penguins` data frame, base R code would be\n\n``` toml\nmean(penguins$bill_length_mm)\n```\n\nTry the code to see if it works.\nIf not, what is the problem and how would you fix it?\n\nIn the tidyverse, the code for the mean of the bill length would be\n\n``` toml\npenguins %>% summarize(length_mean = mean(bill_length_mm))\n```\n\nThe symbol `%>%` is called a pipe and is very common in tidyverse.\nIt takes anything on its left and sends it (pipes it) to the function on the right.\nHere, we are taking the mtcars data frame and piping it into the summarize function (the function for summary statistics).\nInside the function, we specify the variable and the statistic (in this case the ***mean***).\nWe have chosen to name the result as `length_mean` but this could be changed.\n\nYou can compute other summary statistics in a similar manner as above and if there is an NA one way to deal with would be to remove it.\nIn some cases, one would replace NA with the average of the other values.\n\n## Visualizing with ggplot2\n\nIn this section, we will start by creating scatter plots and then proceed to bar plots.\nYou will learn about more visualization tools in later labs.\n\n### Scatter plots\n\nSuppose we want to answer the following question: Do penguins with longer flippers weigh more or less than penguins with shorter flippers?\n\nWe will use a package called `ggplot2` (part of tidyverse) to create a **scatter plot** to visualize the association between flipper length and and body weight.\n\n`ggplot2` is a package (part of the tidyverse umbrella) that is used to create nice-looking graphics.\nIt adopts the **grammar of graphics**, which is a coherent system for describing and building graphs.\n\nYou provide the **data**, tell ggplot2 how to **map** variables to aesthetics, what **graphical primitives** to use, and it takes care of the details.\n\nWith ggplot2, you begin a plot with the function ggplot(), defining a plot object that you then add layers to sequentially until you get the desired plot.\nWe will do this in steps:\n\n-   Step 1: Add the data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  ggplot(data = penguins)\n```\n\n::: {.cell-output-display}\n![](Lab_1_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nThis creates an empty canvas\n\n-   Step 2: Provide the information about the x-axis and the y-axis (i.e., what variable do you want where?). We call this a **mapping**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n)  \n```\n\n::: {.cell-output-display}\n![](Lab_1_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nThe above code adds to our empty canvas the variables specified for the y axis and the x-axis.\nWe still do not have a scatter plot.\n\n-   Step 3: Define the geometry (geom) that you want ggplot2 to use. In our case, we want to use points and so we use the function `geom_point()`. Notice that you must have the parentheses because this is a function that can take arguments (you will learn more about this). Use teh code below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Lab_1_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nWe finally have our scatter plot.\nBased on this scatter plot, what can you say about the question we sought to answer?\n\nRemember the steps:\n\n-   Give ggplot the `data`,\n-   provide a `mapping`, and\n-   define a geometry using `geom_`.\n\n***Question:*** Try to change the geometry above to a histogram, i.e.,\n\n``` toml\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_histogram()\n```\n\nDoes it work?\nIf not, why?\n\n### Adding more aesthetics\n\nThe scatter plot above is a great tool to visualize the relationship between the **two** variables (flipper length and weight).\nSuppose we want to add a third (categorical) variable such as species to the scatter plot.\nWe can achieve this by adding a third argument such as color to the aesthetics).\nSee code below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color=species )\n) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Lab_1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\nWhat do you learn from this new scatter plot that you do not from the first?\n\nYou can also visualize how the different species are scattered on the same scale by using the face_wrap function.\nSee code below\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point()+\n  facet_wrap(~species)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Lab_1_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nYou can also add a numerical variable such as `bill_depth_mm`.\nSee code below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color=bill_depth_mm )\n) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Lab_1_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nWhat do you learn from this scatter plot that you do not from the first?\n\n### Creating bar plots\n\nYou can also create bar plots in a similar manner as above.\nRemember that bar plots are for categorical variables.\nFor example, we can use a bar plot to visualize the species of the penguins.\nSee code below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = species)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Lab_1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nThe above bar plot simply gives us the count for each species.\nIf you wanted to color the bars by species, you can\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = species, color=species)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Lab_1_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\nYou can make the colors to fill the bars by using `fill` instead of `color`.\nSee below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = species, fill=species)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Lab_1_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nIf you wanted to add another categorical variable such as `island` to visualize the relationship, you can fill by island nstead of by species.\nSee below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = species, fill = island)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Lab_1_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nThe problem with this bar plot is that it is difficult to interpret.\nWe often prefer to have side-by-side bar plots.\nTo achieve this, we add an argument called **position** inside the **geom_bar** function and set it to `dodge`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = species, fill = island)) +\n  geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](Lab_1_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n## Exercises\n\n1.  ***(2 pts)*** There is a data frame called loan50 that is contained in the openintro package. load the data frame into your work space. <!--\n                            data(loan50)\n                            -->\n2.  ***(2 pts)*** Give a brief description of this data frame. How many variables does the data frame have? How many cases/observations does it have? <!--\n                            ?loan50\n                            -->\n3.  ***(4 pts)*** Do people that have been employed for long tend to get lower interest rates? To answer this question, create a scatter plot for the variables `emp_length` and `interest_rate`. <!--\n\n\n                            ::: {.cell}\n                            \n                            ```{.r .cell-code}\n                            ggplot(\n                            data=loan50, aes(x=emp_length, y=interest_rate)) +\n                            geom_point()\n                            ```\n                            \n                            ::: {.cell-output .cell-output-stderr}\n                            \n                            ```\n                            Warning: Removed 2 rows containing missing values or values outside the scale range\n                            (`geom_point()`).\n                            ```\n                            \n                            \n                            :::\n                            \n                            ::: {.cell-output-display}\n                            ![](Lab_1_files/figure-html/unnamed-chunk-14-1.png){width=672}\n                            :::\n                            :::\n\n\n                            -->\n4.  ***(4 pts)*** Recreate the following plot using the loan50 data frame.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Lab_1_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n5.  ***(4 pts)*** Create a bar plot (with differently colored bars) to visualize the distribution of the loans by `homeownership`.\n    What insights can you draw from this bar plot?\n    <!--\n\n\n                            ::: {.cell}\n                            \n                            ```{.r .cell-code}\n                            ggplot(\n                            data=loan50, aes(x=homeownership, fill=homeownership)) +\n                            geom_bar()\n                            ```\n                            \n                            ::: {.cell-output-display}\n                            ![](Lab_1_files/figure-html/unnamed-chunk-16-1.png){width=672}\n                            :::\n                            :::\n\n\n                            -->\n\n6.  ***(4 pts)*** Recreate the following plot using the loan50 data frame.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Lab_1_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Lab_1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}